#include "cache.h"
#include <bits/stdc++.h>
#include <atd.h>
int cur1=0,cur2=0;
 int ucp1,ucp2;



uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<LLC_WAY; way++) {
        if (block[set][way].valid == false ) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });
            
            
            break;
        }
    }

    // LRU victim
    for(int i=0;i<LLC_WAY;i++)//G9: counting the current ways allocated to each cpu
	{
		if(block[set][i].cpu == 0)
		{
			
			cur1++;
		}
		else
		{
			
			cur2++;
		}
	}	
	
    int max1=0,index1=0,max2=0,index2=0;//variables for representing maximum lru of the blocks from each Core
    
    if (way == LLC_WAY) {//G9:when the set is full
    
    for(way=0;way<LLC_WAY;way++){
         if(block[set][way].cpu==0){
         if(block[set][way].lru>max1){
         max1=block[set][way].lru;
         index1=way;
         }
   
         }
         else{
         if(block[set][way].lru>max2){
         max2=block[set][way].lru;
         index2=way;
         }
      
         }
    }
        for (way=0; way<LLC_WAY; way++) {
            if(cpu==0){//G9: if the requested block is from core 0
            if(cur1<ucp1){//G9: when allocated ways to Core 0 are less than that required for UCP
            if (block[set][way].lru == max2) {
                
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });
cur1++;
cur2--;
                break;
            }
            }
            else if(cur1>=ucp1){//G9: 
                if (block[set][way].lru == max1) {
                
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });
                break;
            }
            }
            
            
            }
            else{
             if(cur2<ucp2){//G9: when allocated ways to Core 1 are less than that required for UCP
            if (block[set][way].lru == max1) {
                
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });
cur2++;
cur1--;
                break;
            }
            }
            else if(cur2>=ucp2){
            if (block[set][way].lru == max2) {
                
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << _func_ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
            }
            
            
            
            }
            
        }
    }

    if (way == LLC_WAY) {
        //cerr << "[" << NAME << "] " << _func_ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
      string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    if (hit)
      {
      for(uint32_t i=0;i<LLC_WAY;i++){
      if (block[set][i].lru < block[set][way].lru) {
            block[set][i].lru++;
        }
      }
      block[set][way].lru=0;
      }
    

}


void CACHE:: llc_initialize_replacement(){

}

void CACHE::llc_replacement_final_stats()
{

}
